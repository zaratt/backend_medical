// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//create a user

model User {
  id                   Int               @id
  name                 String
  gender               Gender            @default(Selecionar)
  password             String?
  role                 UserRole          @default(USER)
  checkLocationOnLogin Boolean           @default(false)
  countryCode          String            @default("br")
  notificationEmail    NotificationEmail @default(ACCOUNT)
  prefersLanguage      String            @default("pt-br")
  prefersEmailId       Int?
  profilePictureUrl    String            @default("https://unavatar.now.sh/fallback.png")
  twoFactorMethod      MfaMethod         @default(NONE)
  twoFactorPhone       String?
  twoFactorSecret      String?
  prefersEmail         Email?            @relation("userPrefersEmail", fields: [prefersEmailId], references: [id])
  apiKeys              ApiKey[]          @relation("userApiKey")
  auditLogs            AuditLog[]        @relation("userAuditLog")
  emails               Email[]           @relation("userEmail")
  identities           Identity[]        @relation("userIdentity")
  memberships          Membership[]      @relation("userMembership")
  sessions             Session[]         @relation("userSession")
  notes                Notes[]           @relation("userNotes")
  active               Boolean           @default(true)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt


  @@index([prefersEmailId], name: "prefersEmailId")
}

//create a group

model Group {
  id                Int          @id
  autoJoinDomain    Boolean      @default(false)
  forceTwoFactor    Boolean      @default(false)
  ipRestrictions    String?
  name              String
  onlyAllowDomain   Boolean      @default(false)
  profilePictureUrl String       @default("https://unavatar.now.sh/fallback.png")
  attributes        Json?
  parentId          Int?
  parent            Group?       @relation("groupSubgroups", fields: [parentId], references: [id])
  apikeys           ApiKey[]     @relation("groupApiKey")
  auditLogs         AuditLog[]   @relation("groupAuditLog")
  doctorlist        DoctorList[] @relation("groupDoctors")
  subgroups         Group[]      @relation("groupSubgroups")
  memberships       Membership[] @relation("groupMembership")
  webhooks          Webhook[]    @relation("groupWebhook")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([parentId], name: "parentId")
}

//Register user email

model Email {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  emailSafe  String   @unique
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int
  user       User     @relation("userEmail", fields: [userId], references: [id])
  users      User[]   @relation("userPrefersEmail")

  @@index([userId], name: "userId")
}

model ApiKey {
  id                   Int        @id @default(autoincrement())
  description          String?
  ipRestrictions       Json?
  apiKey               String     @unique
  name                 String?
  groupId              Int?
  referrerRestrictions Json?
  scopes               Json?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  userId               Int?
  auditLogs            AuditLog[] @relation("apiKeyAuditLog")
  group                Group?     @relation("groupApiKey", fields: [groupId], references: [id])
  user                 User?      @relation("userApiKey", fields: [userId], references: [id])

  @@index([groupId], name: "groupId")
  @@index([userId], name: "userId")
}

model DoctorList {
  id                Int      @id @default(autoincrement())
  profilePictureUrl String   @default("https://unavatar.now.sh/fallback.png")
  name              String
  speciality        String
  subspeciality     String
  clinic            String?
  city              String?
  state             String?
  phone             String?
  mobile            String?
  email             String?
  website           String?
  contact1          String?
  contact2          String?
  lastcall          DateTime @default(now())
  isVerified        Boolean  @default(false)
  groupId           Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  group             Group    @relation("groupDoctors", fields: [groupId], references: [id])

  @@index([groupId], name: "groupId")
}

//Notes for call with doctor

model Notes {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  content   String?
  published Boolean  @default(false)
  userId    Int
  user      User     @relation("userNotes", fields: [userId], references: [id])
}

model Identity {
  id        Int          @id @default(autoincrement())
  loginName String
  type      IdentityType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    Int
  user      User         @relation("userIdentity", fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

//Assign member to group

model Membership {
  id        Int            @id @default(autoincrement())
  groupId   Int
  role      MembershipRole @default(MEMBRO)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    Int
  group     Group          @relation("groupMembership", fields: [groupId], references: [id])
  user      User           @relation("userMembership", fields: [userId], references: [id])

  @@index([groupId], name: "groupId")
  @@index([userId], name: "userId")
}

//Register login session

model Session {
  id              Int      @id @default(autoincrement())
  ipAddress       String
  token           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userAgent       String?
  city            String?
  region          String?
  timezone        String?
  countryCode     String?
  browser         String?
  operatingSystem String?
  userId          Int
  user            User     @relation("userSession", fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model Webhook {
  contentType String    @default("application/json")
  event       String
  id          Int       @id @default(autoincrement())
  isActive    Boolean   @default(false)
  lastFiredAt DateTime?
  groupId     Int
  secret      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  url         String
  group       Group     @relation("groupWebhook", fields: [groupId], references: [id])

  @@index([groupId], name: "groupId")
}

//Event Log

model AuditLog {

  event           String
  rawEvent        String
  id              Int      @id @default(autoincrement())
  groupId         Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          Int?
  apiKeyId        Int?
  ipAddress       String?
  userAgent       String?
  city            String?
  region          String?
  timezone        String?
  countryCode     String?
  browser         String?
  operatingSystem String?
  group           Group?   @relation("groupAuditLog", fields: [groupId], references: [id])
  user            User?    @relation("userAuditLog", fields: [userId], references: [id])
  apiKey          ApiKey?  @relation("apiKeyAuditLog", fields: [apiKeyId], references: [id])

  @@index([apiKeyId], name: "apiKeyId")
  @@index([groupId], name: "groupId")
  @@index([userId], name: "userId")
}

enum Gender {
  Selecionar
  Masculino
  Feminino
}

enum NotificationEmail {
  ACCOUNT
  UPDATES
}

enum UserRole {
  SUDO
  USER
}

enum MfaMethod {
  NONE
  SMS
  TOTP
  EMAIL
}

enum MembershipRole {
  OWNER
  ADMIN
  MEMBRO
}

enum IdentityType {
  GOOGLE
  APPLE
  SLACK
}
